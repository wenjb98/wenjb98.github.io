<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式--单例</title>
    <link href="/2020/09/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B/"/>
    <url>/2020/09/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="设计模式——单例"><a href="#设计模式——单例" class="headerlink" title="设计模式——单例"></a>设计模式——单例</h3><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h4><ul><li>整个程序中必须仅存在唯一一个单例对象</li><li>单例类中需定义本类的对象私有静态属性，私有化构造方法</li><li>必须提供一个给外部获取实例的方法</li></ul><h4 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h4><h5 id="2-1线程不同步（线程不安全）"><a href="#2-1线程不同步（线程不安全）" class="headerlink" title="2.1线程不同步（线程不安全）"></a>2.1线程不同步（线程不安全）</h5><p>​    这是实现单例设计模式的方法之一，但是此方法有其重大缺陷</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton1</span> </span>&#123;    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton1 instance  = <span class="hljs-keyword">null</span> ;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton1</span><span class="hljs-params">()</span></span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton1 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;  <span class="hljs-comment">//线程二</span>             instance = <span class="hljs-keyword">new</span> Singleton1();  <span class="hljs-comment">//线程一</span>        &#125;        <span class="hljs-keyword">return</span>  instance;    &#125;  &#125;</code></pre><p>​    若是不仔细推敲一番，很难发现其问题所在，但是将代码带入多线程的环境下就会发现，在线程一执行对象初始化语句后，若是被线程二抢占执行权，此时的instance依旧为null,就会出现多个线程执行对象初始化，并且赋值，单例也就不攻自破。</p><h5 id="2-2线程同步"><a href="#2-2线程同步" class="headerlink" title="2.2线程同步"></a>2.2线程同步</h5><p> 通过上面的问题，此时首先想到的可能就是使用synchronized，来同步getInstance方法。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton1 <span class="hljs-title">getInstanceSyn</span><span class="hljs-params">()</span></span>&#123;      <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;          instance = <span class="hljs-keyword">new</span> Singleton1();      &#125;      <span class="hljs-keyword">return</span>  instance;  &#125;</code></pre><p> 这种方法确实能解决出现多实例的bug，但是这样并不高效，<strong>因为在任何时候调用此方法，都需要承受线程同步所带来的开销。</strong></p><p><strong>这时候就需要引入DCL 双重检查锁模式</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton1 <span class="hljs-title">getInstanceDCLP</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;        <span class="hljs-keyword">synchronized</span> (Singleton1.class)&#123;            <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;                instance = <span class="hljs-keyword">new</span> Singleton1();            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span>  instance;&#125;</code></pre><p> 这种方法用了两次条件判断instance是否为空，在第一次判断的时候不加锁，第二次加锁，这样当对象被实例化之后，将不会再去执行同步代码块中的内容，也就不需要承担同步所带来的资源开销。</p><h4 id="3-饿汉式"><a href="#3-饿汉式" class="headerlink" title="3.饿汉式"></a>3.饿汉式</h4><p>​    这种方式就比较简单粗暴，同时也是使用较多的一种实现单例的方法，在程序加载之后就立即初始化私有对象属性。</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 饿汉单例模式</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton2</span> </span>&#123;        <span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> Singleton2  instance= <span class="hljs-keyword">null</span>;        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton2</span><span class="hljs-params">()</span></span>&#123;            &#125;    <span class="hljs-keyword">static</span> &#123;        instance = <span class="hljs-keyword">new</span> Singleton2();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton2 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> instance;    &#125;&#125;</code></pre><p>这种模式是天生<strong>线程安全</strong>的，但是在系统项目启动后，不管你是否调用获取实例的方法，都会消耗内存空间。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java基础-坦克大战难点总结</title>
    <link href="/2020/09/25/java%E5%9F%BA%E7%A1%80-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E9%9A%BE%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2020/09/25/java%E5%9F%BA%E7%A1%80-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E9%9A%BE%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="1-游戏界面闪烁"><a href="#1-游戏界面闪烁" class="headerlink" title="1 游戏界面闪烁"></a>1 游戏界面闪烁</h4><ul><li><p>问题描述 : 坦克在移动的过程中间歇闪烁 </p></li><li><p>问题分析：由于我游戏窗口是继承自 Frame 类的，重写了此类的update方法，此方法不能主动调用 需要paint 和repaint 回调,这时候就需要单独开启一个线程间隔实现指定时间对游戏界面的定时重绘（刷新），譬如我的重绘线程调用一次方法就sleep 30 毫秒 那么我1秒就会重绘33次，FPS也就是33 ，<strong>这个时候也就产生了问题，在repaint触发时没有将当前的绘制的图形进行显示</strong></p></li><li><p>解决方案：采用双缓冲方法—-所谓双缓冲，就是在内存中开辟一片区域，作为后台图象，程序对它进行更新、修改，绘制完成后再显示到屏幕上。  </p><ul><li><p>定义一个Graphics对象gBuffer和一个Image对象iBuffer。按屏幕大小建立一个缓冲对象给iBuffer。然后取得iBuffer的Graphics赋给gBuffer。此处可以把gBuffer理解为逻辑上的缓冲屏幕，而把iBuffer理解为缓冲屏幕上的图象。</p></li><li><p>在gBuffer（逻辑上的屏幕）上用paint(Graphics g)函数绘制图象。</p></li><li><p>将后台图象iBuffer绘制到Frame窗体。</p><pre><code class="hljs java"><span class="hljs-comment">/**双缓冲底层虚拟图*/</span>    <span class="hljs-keyword">private</span> BufferedImage bufImage =<span class="hljs-keyword">new</span>      BufferedImage(FRAME_WIDTH,FRAME_HEIGHT,BufferedImage.TYPE_4BYTE_ABGR);<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Graphics g1)</span> </span>&#123;        <span class="hljs-comment">//使用双缓冲先在bufImage虚拟图上画</span>        Graphics g = bufImage.getGraphics();        <span class="hljs-keyword">switch</span> (gameState)&#123;            <span class="hljs-keyword">case</span> STATE_MENU:                drawMenu(g);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> STATE_HELP:                drawHelp(g);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> STATE_ABOUT:                drawAbout(g);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> STATE_RUN:                drawRun(g);                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> STATE_OVER:                drawOver(g);                <span class="hljs-keyword">break</span>;        &#125;        <span class="hljs-comment">//使用系统画笔绘制到frame上</span>        g1.drawImage(bufImage,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-keyword">null</span>);    &#125;</code></pre></li></ul></li></ul><p>  详细的解决方案：<a href="https://blog.csdn.net/kai_wei_zhang/article/details/8120382?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-2-8120382.nonecase&amp;utm_term=java%20%E5%8F%8C%E7%BC%93%E5%86%B2%E6%8A%80%E6%9C%AF">https://blog.csdn.net/kai_wei_zhang/article/details/8120382?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-2-8120382.nonecase&amp;utm_term=java%20%E5%8F%8C%E7%BC%93%E5%86%B2%E6%8A%80%E6%9C%AF</a></p><h4 id="2-对象池设计"><a href="#2-对象池设计" class="headerlink" title="2 对象池设计"></a>2 对象池设计</h4><ul><li><p>问题描述：游戏中子弹 坦克 地图的元素块 游戏运行过程中需要频繁的进行实例的创建，在坦克挂掉，子弹离开屏幕后，地图块被破坏掉后 不能进行及时的回收。</p></li><li><p>问题分析：频繁的创建对象，以及对象回收，虽然java的jvm有相应的垃圾回收机制，但是，<strong>不能做到用完即回收。</strong></p></li><li><p>解决方案：引入对象池，先在游戏开始时初始化指定数量的对象，将对象放入一个数组容器中，在需要用到对象的时候从池中获取，用后在放回池中。如在游戏开始的时候，先初始化100个子弹对象，当坦克开火的时候重池中获取，当子弹击中敌人 地图块 或者脱离边界的时候回收。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nmmsl.util;<span class="hljs-keyword">import</span> cn.nmmsl.game.Bullet;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 炮弹对象池</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BulletPool</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> DEFAULT_POOL_SIZE = <span class="hljs-number">200</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> POOL_MAX_SIZE = <span class="hljs-number">300</span>;    <span class="hljs-comment">//用于保存所有跑弹的容器</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Bullet&gt; pool = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 在加载时创建 初始化200个炮弹对象放入池中</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; DEFAULT_POOL_SIZE; i++) &#123;            pool.add(<span class="hljs-keyword">new</span> Bullet());        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Bullet <span class="hljs-title">get</span><span class="hljs-params">()</span></span>&#123;        Bullet bullet = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">if</span>(pool.size() == <span class="hljs-number">0</span>)&#123;            <span class="hljs-comment">//池中的炮弹打完了 （打出比回收快）</span>            bullet = <span class="hljs-keyword">new</span> Bullet();        &#125;<span class="hljs-keyword">else</span>&#123;            bullet = pool.remove(<span class="hljs-number">0</span>);        &#125;        <span class="hljs-keyword">return</span> bullet;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">theReturn</span><span class="hljs-params">(Bullet bullet)</span></span>&#123;        <span class="hljs-keyword">if</span>(pool.size() == POOL_MAX_SIZE)&#123;            <span class="hljs-comment">//池的容量已经到达临界 不用归还</span>            <span class="hljs-keyword">return</span>;        &#125;        pool.add(bullet);    &#125;&#125;</code></pre></li></ul><h4 id="3-坦克与地图块碰撞"><a href="#3-坦克与地图块碰撞" class="headerlink" title="3 坦克与地图块碰撞"></a>3 坦克与地图块碰撞</h4><ul><li>问题描述：坦克与地图块都是矩形的像素块，不方便进行碰撞判定</li><li>问题分析：化面为点</li><li>解决方案：取地图块的8个点，逐一和矩形坦克进行点面重叠判定</li></ul><pre><code class="hljs java">    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  判断一个点是否在某一个正方形内部</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rectX 正方形中心的x坐标</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rectY 正方形中心的Y坐标</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> radius 正方形边长的一半</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pointX  点的X</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pointY 点的Y</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果点在正方形是的内部 返回true</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span>  <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCollide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rectX ,<span class="hljs-keyword">int</span> rectY ,<span class="hljs-keyword">int</span> radius ,  <span class="hljs-keyword">int</span> pointX ,<span class="hljs-keyword">int</span> pointY)</span></span>&#123;        <span class="hljs-keyword">int</span> disX = Math.abs(rectX-pointX);        <span class="hljs-keyword">int</span> disY = Math.abs(rectY-pointY);        <span class="hljs-keyword">if</span> (disX &lt; radius &amp;&amp; disY &lt; radius)&#123;            <span class="hljs-keyword">return</span>  <span class="hljs-keyword">true</span>;        &#125;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;<span class="hljs-comment">/**</span><span class="hljs-comment">     * 所有的地图块与坦克碰撞逻辑：</span><span class="hljs-comment">     *   从地图块中提取8个点和</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *                                  *   *   *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>                           *       *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>                          *   *   *</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCollideTile</span><span class="hljs-params">(List&lt;MapTile&gt; tiles)</span></span>&#123;        <span class="hljs-keyword">for</span> (MapTile mapTile : tiles) &#123;            <span class="hljs-keyword">if</span> (!mapTile.isVisible() || mapTile.getType() == MapTile.TYPE_COVER)&#123;                <span class="hljs-keyword">continue</span>;            &#125;            <span class="hljs-comment">//点1</span>            <span class="hljs-keyword">int</span> tileX = mapTile.getX();            <span class="hljs-keyword">int</span> tileY = mapTile.getY();            <span class="hljs-keyword">boolean</span> collide = MyUtil.isCollide(x, y, RADIUS, tileX, tileY);            <span class="hljs-keyword">if</span> (collide)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-comment">//点2</span>            tileX += MapTile.radius;            collide = MyUtil.isCollide(x,y,RADIUS,tileX,tileY);            <span class="hljs-keyword">if</span> (collide)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-comment">//点3</span>            tileX += MapTile.radius;            collide = MyUtil.isCollide(x,y,RADIUS,tileX,tileY);            <span class="hljs-keyword">if</span> (collide)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-comment">//点4</span>            tileY += MapTile.radius ;            collide = MyUtil.isCollide(x,y,RADIUS,tileX,tileY);            <span class="hljs-keyword">if</span> (collide)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-comment">//点5</span>            tileY += MapTile.radius ;            collide = MyUtil.isCollide(x,y,RADIUS,tileX,tileY);            <span class="hljs-keyword">if</span> (collide)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-comment">//点6</span>            tileX -= MapTile.radius;            collide = MyUtil.isCollide(x,y,RADIUS,tileX,tileY);            <span class="hljs-keyword">if</span> (collide)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-comment">//点7</span>            tileX -= MapTile.radius;            collide = MyUtil.isCollide(x,y,RADIUS,tileX,tileY);            <span class="hljs-keyword">if</span> (collide)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-comment">//点8</span>            tileY -= MapTile.radius;            collide = MyUtil.isCollide(x,y,RADIUS,tileX,tileY);            <span class="hljs-keyword">if</span> (collide)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法—简单查找</title>
    <link href="/2020/09/21/%E7%AE%97%E6%B3%95%E2%80%94%E7%AE%80%E5%8D%95%E6%9F%A5%E6%89%BE/"/>
    <url>/2020/09/21/%E7%AE%97%E6%B3%95%E2%80%94%E7%AE%80%E5%8D%95%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h5 id="1-1-算法描述："><a href="#1-1-算法描述：" class="headerlink" title="1.1 算法描述："></a>1.1 算法描述：</h5><ul><li>将数组中的元素逐个和待查找数据对比</li><li>输入：数组, 待查找数据</li><li>输出：若数据中包含和待查找数据相同的元素 则返回次元素在数组中的索引，否则返回-1</li></ul><h5 id="1-2-第一种简单查找"><a href="#1-2-第一种简单查找" class="headerlink" title="1.2 第一种简单查找"></a>1.2 第一种简单查找</h5><p>​    </p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">case1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr , <span class="hljs-keyword">int</span> x)</span></span>&#123;       <span class="hljs-keyword">int</span> pos = -<span class="hljs-number">1</span>;       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i&lt;arr.length ;i++ )           <span class="hljs-keyword">if</span>(arr[i] == x)               pos = i;       <span class="hljs-keyword">return</span> pos;   &#125;</code></pre><h5 id="1-3-第二种简单查找"><a href="#1-3-第二种简单查找" class="headerlink" title="1.3 第二种简单查找"></a>1.3 第二种简单查找</h5><p>​    </p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">case2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr ,<span class="hljs-keyword">int</span> x)</span></span>&#123;       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;           <span class="hljs-keyword">if</span>(arr[i]==x)               <span class="hljs-keyword">return</span> i;       &#125;       <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;   &#125;</code></pre><h5 id="1-4-第三种简单查找"><a href="#1-4-第三种简单查找" class="headerlink" title="1.4 第三种简单查找"></a>1.4 第三种简单查找</h5><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">case3</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> x)</span></span>&#123;        <span class="hljs-keyword">int</span> temp = arr[arr.length-<span class="hljs-number">1</span>];        arr[arr.length-<span class="hljs-number">1</span>] = x;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;            <span class="hljs-keyword">if</span> (arr[i]==x)&#123;                arr[arr.length-<span class="hljs-number">1</span>] = temp;                <span class="hljs-keyword">if</span>(i&lt;arr.length-<span class="hljs-number">1</span> || temp == x )&#123;                    <span class="hljs-keyword">return</span> i;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;    &#125;</code></pre><h5 id="1-5-测试"><a href="#1-5-测试" class="headerlink" title="1.5 测试"></a>1.5 测试</h5><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">34</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">67</span>,<span class="hljs-number">43</span>,<span class="hljs-number">78</span>,<span class="hljs-number">36</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;        <span class="hljs-comment">/**</span><span class="hljs-comment">         *  case 1 和 case2的区别</span><span class="hljs-comment">         *      相同：case1 和 case2 都是将数组中的元素拿出逐个与x比较</span><span class="hljs-comment">         *      不同: 1 返回索引的时机不同 ,在case1中若找到与x相同的元素循环还会继续下去 ，直到比完所          *           有元素</span><span class="hljs-comment">         *      case2在索引到目标元素后就会直接返回下标</span><span class="hljs-comment">         *           2 找到目标元素的位置不同 case1中可找出x最后一次出现索引，而case2会找到目标元素 *第一次出现的索引。</span><span class="hljs-comment">         *</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">int</span> case1 = case1(arr, <span class="hljs-number">5</span>);  <span class="hljs-comment">//10</span>        <span class="hljs-keyword">int</span> case2 = case2(arr, <span class="hljs-number">5</span>); <span class="hljs-comment">//1</span>        System.out.println(case1);        System.out.println(case2);        <span class="hljs-comment">/**</span><span class="hljs-comment">         *   case3 算法目的与case2相同也是找出目标元素第一次出现的位置</span><span class="hljs-comment">         *</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">int</span> case3 = case3(arr, <span class="hljs-number">5</span>);  <span class="hljs-comment">//1</span>        System.out.println(case3);    &#125;</code></pre><h5 id="1-6-总结"><a href="#1-6-总结" class="headerlink" title="1.6 总结"></a>1.6 总结</h5><ul><li><p>若是需要查找目标元素最后一次出现的位置，使用第一张算法</p></li><li><p>若是查找目标元素第一次一次出现的位置，使用二三算法</p></li><li><p>若是需要只需找出数组中是否含有目标元素 二三算法效率更高 </p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/17/hello-world/"/>
    <url>/2020/09/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
