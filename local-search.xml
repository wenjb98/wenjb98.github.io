<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>first blog</title>
    <link href="/2020/09/17/first-blog/"/>
    <url>/2020/09/17/first-blog/</url>
    
    <content type="html"><![CDATA[<h2 id="数据结构第三章-栈与队列-stack-or-queue-的代码实现"><a href="#数据结构第三章-栈与队列-stack-or-queue-的代码实现" class="headerlink" title="数据结构第三章-栈与队列(stack or queue)的代码实现"></a>数据结构第三章-栈与队列(stack or queue)的代码实现</h2><ul><li><p>运行环境：VS2017</p></li><li><p>调试情况：书中给出的数据均可实现</p></li></ul><h3 id="一、栈的实现与基本操作"><a href="#一、栈的实现与基本操作" class="headerlink" title="一、栈的实现与基本操作"></a>一、栈的实现与基本操作</h3><h4 id="1、栈的链式存储结构"><a href="#1、栈的链式存储结构" class="headerlink" title="1、栈的链式存储结构"></a>1、栈的链式存储结构</h4><p>​        栈的链式存储结构用双向链表加一个头指针、一个尾指针即可实现。用链式存储结构写栈的基本操作很简单即不在这附上具体代码，放一个结构体即可：</p><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>    <span class="hljs-keyword">int</span> e;&#125;SElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span></span><span class="hljs-class">&#123;</span>    SElemType data;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span> * <span class="hljs-title">prior</span>;</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span> * <span class="hljs-title">next</span>;</span>&#125;STNode,*pSNode;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><span class="hljs-class">&#123;</span>    pSNode base;<span class="hljs-comment">//指向头结点</span>    pSNode top;<span class="hljs-comment">//指向为结点</span>&#125;SqStack;</code></pre><p>​        </p><h4 id="2、栈的顺序存储结构——基本操作"><a href="#2、栈的顺序存储结构——基本操作" class="headerlink" title="2、栈的顺序存储结构——基本操作"></a>2、栈的顺序存储结构——基本操作</h4><p>​        严奶奶的书中具体介绍的是顺序存储结构为主，在这具体实现的代码便是栈的顺序存储结构。</p><pre><code class="hljs c"><span class="hljs-comment">//Stack.h</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ok 1;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR 0;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> true 1;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> false 0;</span><span class="hljs-keyword">int</span> STACK_INIT_SIZE = <span class="hljs-number">100</span>;<span class="hljs-keyword">int</span> STACKINCREMENT = <span class="hljs-number">10</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Status;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-keyword">char</span> data;&#125;SElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>SElemType *base;SElemType *top;<span class="hljs-keyword">int</span> stacksize;&#125;SqStack;<span class="hljs-comment">//栈基本操作</span><span class="hljs-comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="hljs-function">Status <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span></span>;<span class="hljs-comment">//构建栈</span><span class="hljs-function">Status <span class="hljs-title">DestroyStack</span><span class="hljs-params">(SqStack &amp;S)</span></span>;<span class="hljs-comment">//销毁栈</span><span class="hljs-function">Status <span class="hljs-title">ClearStack</span><span class="hljs-params">(SqStack &amp;S)</span></span>;<span class="hljs-comment">//若栈存在，将栈清空</span><span class="hljs-function">Status <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span>;<span class="hljs-comment">//判断栈是否为空</span><span class="hljs-function"><span class="hljs-keyword">int</span>    <span class="hljs-title">StackLength</span><span class="hljs-params">(SqStack S)</span></span>;<span class="hljs-comment">//返回栈的长度</span><span class="hljs-function">Status <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, SElemType &amp;e)</span></span>; <span class="hljs-comment">//查看栈顶元素</span><span class="hljs-function">Status <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S, SElemType e)</span></span>;<span class="hljs-comment">//进栈</span><span class="hljs-function">Status <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S, SElemType &amp;e)</span></span>;<span class="hljs-comment">//出栈</span><span class="hljs-function">Status <span class="hljs-title">StackTraverse</span><span class="hljs-params">(SqStack S)</span></span>;<span class="hljs-comment">//遍历栈</span><span class="hljs-comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="hljs-function">Status <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span><span class="hljs-comment">//构建栈</span></span><span class="hljs-function"></span>&#123;S.base = (SElemType *)<span class="hljs-built_in">malloc</span>(STACK_INIT_SIZE *<span class="hljs-keyword">sizeof</span>(SElemType));<span class="hljs-keyword">if</span> (!S.base) <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);S.top = S.base;S.stacksize = STACK_INIT_SIZE;    <span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span><span class="hljs-comment">//判断栈是否为空</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (S.top == S.base) <span class="hljs-keyword">return</span> ok;<span class="hljs-keyword">return</span> ERROR;&#125;<span class="hljs-function">Status <span class="hljs-title">DestroyStack</span><span class="hljs-params">(SqStack &amp;S)</span><span class="hljs-comment">//销毁栈</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">free</span>(S.base);S.base = <span class="hljs-literal">NULL</span>;S.stacksize = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">ClearStack</span><span class="hljs-params">(SqStack &amp;S)</span><span class="hljs-comment">//若栈存在，将栈清空</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (StackEmpty(S)) <span class="hljs-keyword">return</span> ok;<span class="hljs-keyword">while</span> (!StackEmpty(S))--S.top;<span class="hljs-comment">//S.stacksize = 0;</span><span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span>    <span class="hljs-title">StackLength</span><span class="hljs-params">(SqStack S)</span><span class="hljs-comment">//返回栈的长度</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i = S.top - S.base;<span class="hljs-comment">/*while (p != S.top)</span><span class="hljs-comment">&#123;</span><span class="hljs-comment">++p;</span><span class="hljs-comment">++i;</span><span class="hljs-comment">&#125;*/</span><span class="hljs-keyword">return</span> i;&#125;<span class="hljs-function">Status <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, SElemType &amp;e)</span> <span class="hljs-comment">//查看栈顶元素</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (StackEmpty(S)) <span class="hljs-keyword">return</span> ERROR;SElemType *p;p = S.top;--p;e = *p;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S, SElemType e)</span> <span class="hljs-comment">//进栈</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (S.top - S.base &gt;= S.stacksize)&#123;S.base = (SElemType *)<span class="hljs-built_in">realloc</span>(S.base,(S.stacksize+ STACKINCREMENT)*<span class="hljs-keyword">sizeof</span>(SElemType));<span class="hljs-keyword">if</span> (!S.base) <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);S.top = S.base+S.stacksize;S.stacksize = S.stacksize + STACKINCREMENT;&#125;*S.top = e;++S.top;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S, SElemType &amp;e)</span> <span class="hljs-comment">//出栈</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (StackEmpty(S)) <span class="hljs-keyword">return</span> ERROR;--S.top;e = *S.top;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">StackTraverse</span><span class="hljs-params">(SqStack S)</span></span><span class="hljs-function"></span>&#123;SElemType *p = S.base;<span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == S.base)<span class="hljs-keyword">return</span> ERROR;<span class="hljs-keyword">while</span> (p &lt; S.top)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);++p;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-keyword">return</span> ok;&#125;</code></pre><h4 id="3、栈的应用举例"><a href="#3、栈的应用举例" class="headerlink" title="3、栈的应用举例"></a>3、栈的应用举例</h4><p>​        严奶奶书中栈的应用有五个小实例，在这一一放出具体的实现代码。</p><p><img src="C:\Users\19341\Desktop\stack.png"></p><p>​        </p><h5 id="3-1、数值转换"><a href="#3-1、数值转换" class="headerlink" title="3.1、数值转换"></a>3.1、数值转换</h5><pre><code class="hljs c"><span class="hljs-comment">//SElemType结构体数据发生改变</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-keyword">int</span> data;&#125;SElemType;<span class="hljs-comment">//除基本函数外还需导入一下函数</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">conversion</span><span class="hljs-params">(SElemType e)</span></span>;<span class="hljs-comment">//测试的为二进制</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">conversion</span><span class="hljs-params">(SElemType e)</span></span><span class="hljs-function"></span>&#123;SqStack S;InitStack(S);<span class="hljs-keyword">int</span> N = e.data;<span class="hljs-keyword">while</span> (N)&#123;e.data = N%<span class="hljs-number">2</span>;Push(S, e);N = N / <span class="hljs-number">2</span>;&#125;<span class="hljs-keyword">while</span> (!StackEmpty(S))&#123;Pop(S, e);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, e.data);&#125;<span class="hljs-keyword">return</span>;&#125;</code></pre><h5 id="3-2、括号匹配监验"><a href="#3-2、括号匹配监验" class="headerlink" title="3.2、括号匹配监验"></a>3.2、括号匹配监验</h5><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-keyword">char</span> data;&#125;SElemType;<span class="hljs-comment">//括号匹配监测</span><span class="hljs-comment">//()、[]</span><span class="hljs-function">Status <span class="hljs-title">matching</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *a, <span class="hljs-keyword">int</span> n)</span></span>;<span class="hljs-function">Status <span class="hljs-title">matching</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *a, <span class="hljs-keyword">int</span> n)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;SqStack S;InitStack(S);SElemType e;SElemType ea;<span class="hljs-keyword">while</span> (i &lt;= n)<span class="hljs-comment">//n 为数组长度  i为数组下标</span>&#123;<span class="hljs-keyword">switch</span> (a[i])&#123;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>: e.data = a[i];Push(S, e);i++;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:e.data = a[i];Push(S, e);i++;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>: GetTop(S, ea);<span class="hljs-keyword">if</span> (ea.data == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;Pop(S,ea);i++;&#125;<span class="hljs-keyword">else</span> i++;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>: GetTop(S, ea);<span class="hljs-keyword">if</span> (ea.data == <span class="hljs-string">&#x27;[&#x27;</span>)&#123;Pop(S, ea);i++;&#125;<span class="hljs-keyword">else</span> i++;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">if</span> (StackEmpty(S)) <span class="hljs-keyword">return</span> ok;<span class="hljs-keyword">return</span> ERROR;&#125;</code></pre><h5 id="3-3、行编辑程序"><a href="#3-3、行编辑程序" class="headerlink" title="3.3、行编辑程序"></a>3.3、行编辑程序</h5><pre><code class="hljs c"><span class="hljs-comment">//行编辑</span><span class="hljs-comment">//# 为退格符、@ 为退行符</span><span class="hljs-function">Status <span class="hljs-title">LineEdit</span><span class="hljs-params">()</span></span>;<span class="hljs-function">Status <span class="hljs-title">LineEdit</span><span class="hljs-params">()</span><span class="hljs-comment">//不知道 EOF 的退出条件是什么</span></span><span class="hljs-function"></span>&#123;SqStack S;SElemType e;InitStack(S);<span class="hljs-keyword">char</span> ch;ch = getchar();<span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch != <span class="hljs-string">&#x27;\n&#x27;</span>)&#123;<span class="hljs-keyword">switch</span>(ch)&#123;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#&#x27;</span>:Pop(S, e); <span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;@&#x27;</span>:ClearStack(S); <span class="hljs-keyword">break</span>;<span class="hljs-keyword">default</span>:e.data = ch;Push(S, e);&#125;ch = getchar();&#125;StackTraverse(S);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&quot;</span>);ClearStack(S);<span class="hljs-keyword">if</span>(ch!= <span class="hljs-string">&#x27;0&#x27;</span>) ch = getchar();&#125;DestroyStack(S);<span class="hljs-keyword">return</span> ok;&#125;</code></pre><p>​    </p><h5 id="3-4、迷宫求解"><a href="#3-4、迷宫求解" class="headerlink" title="3.4、迷宫求解"></a>3.4、迷宫求解</h5><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-keyword">int</span> i;<span class="hljs-keyword">int</span> j;&#125;PosType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-keyword">int</span> ord;<span class="hljs-comment">//序号</span>PosType seat;<span class="hljs-comment">//坐标位置</span><span class="hljs-keyword">int</span> di;<span class="hljs-comment">//方向</span>&#125;SElemType;<span class="hljs-comment">/*</span><span class="hljs-comment">-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="hljs-comment">迷宫求解-需要的所有函数.</span><span class="hljs-comment"></span><span class="hljs-comment">0:路，可通过</span><span class="hljs-comment">1:墙，不可通过;且同时作为不能通过的标记</span><span class="hljs-comment">2:沿途的标记</span><span class="hljs-comment"></span><span class="hljs-comment">-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="hljs-comment">*/</span><span class="hljs-function">Status <span class="hljs-title">Pass</span><span class="hljs-params">(PosType e)</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FootPrint</span><span class="hljs-params">(PosType e)</span></span>;<span class="hljs-function">PosType <span class="hljs-title">NextPos</span><span class="hljs-params">(PosType e, <span class="hljs-keyword">int</span> N)</span></span>;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MarkPrint</span><span class="hljs-params">(PosType e)</span></span>;<span class="hljs-function">Status <span class="hljs-title">MazePath</span><span class="hljs-params">(PosType start, PosType end)</span></span>;<span class="hljs-comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="hljs-function">Status <span class="hljs-title">Pass</span><span class="hljs-params">(PosType e)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> N = carry[e.i][e.j];<span class="hljs-keyword">if</span> (!N) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FootPrint</span><span class="hljs-params">(PosType e)</span></span><span class="hljs-function"></span>&#123;carry[e.i][e.j] = <span class="hljs-number">2</span>;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-function">PosType <span class="hljs-title">NextPos</span><span class="hljs-params">(PosType e, <span class="hljs-keyword">int</span> N)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">switch</span> (N)&#123;<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:e.j = e.j + <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:e.i = e.i + <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:e.j = e.j - <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:e.i = e.i - <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">return</span> e;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MarkPrint</span><span class="hljs-params">(PosType e)</span></span><span class="hljs-function"></span>&#123;carry[e.i][e.j] = <span class="hljs-number">1</span>;<span class="hljs-keyword">return</span>;&#125;<span class="hljs-function">Status <span class="hljs-title">MazePath</span><span class="hljs-params">(PosType start, PosType end)</span></span><span class="hljs-function"></span>&#123;SqStack S;InitStack(S);SElemType e;PosType curpos;curpos = start;<span class="hljs-comment">//设置“当前位置”为“入口位置”</span><span class="hljs-keyword">int</span> curstep = <span class="hljs-number">1</span>;<span class="hljs-comment">//步数</span><span class="hljs-keyword">do</span> &#123;<span class="hljs-keyword">if</span> (Pass(curpos)) &#123;FootPrint(curpos);<span class="hljs-comment">//标记</span>e.ord = curstep;e.seat = curpos;e.di = <span class="hljs-number">1</span>;Push(S, e);<span class="hljs-keyword">if</span> ((curpos.i == end.i) &amp;&amp; (curpos.j == end.j)) &#123; StackTraverse(S); <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;curpos = NextPos(curpos, <span class="hljs-number">1</span>);curstep++;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span> (!StackEmpty(S))&#123;Pop(S,e);<span class="hljs-keyword">while</span> (e.di == <span class="hljs-number">4</span> &amp;&amp; !StackEmpty(S))&#123;MarkPrint(e.seat);Pop(S, e);&#125;<span class="hljs-comment">//while</span><span class="hljs-keyword">if</span> (e.di &lt; <span class="hljs-number">4</span>)&#123;e.di++;Push(S, e);curpos = NextPos(e.seat, e.di);&#125;<span class="hljs-comment">//if</span>&#125;<span class="hljs-comment">//if</span>&#125;<span class="hljs-comment">//else</span>&#125; <span class="hljs-keyword">while</span> (!StackEmpty(S));<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;</code></pre><h5 id="3-5、表达式求值"><a href="#3-5、表达式求值" class="headerlink" title="3.5、表达式求值"></a>3.5、表达式求值</h5><p>​        严奶奶书中的原程序，输入的是一段字符串，加减一直ASCii值相加减，我想不出来，加减的操作数应该是整形，操作符号应该是字符型，肯定不能放在相同类型的栈里面。</p><p>​        自己想出来的方法是在定义一个int类型数组(这个数组模拟栈的先进后出模式)将操作数放在整形数组里面，将操作符放在原先定义的栈里面。</p><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-keyword">char</span> data;&#125;SElemType;<span class="hljs-comment">//表达式求值</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> OPerandType;OPerandType OPND[<span class="hljs-number">50</span>];OPerandType iod=<span class="hljs-number">0</span>;<span class="hljs-comment">//函数</span><span class="hljs-function">Status <span class="hljs-title">In</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span>;<span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">Precede</span><span class="hljs-params">(SElemType e, <span class="hljs-keyword">char</span> c)</span></span>;<span class="hljs-function">OPerandType <span class="hljs-title">Operate</span><span class="hljs-params">(OPerandType a, <span class="hljs-keyword">char</span> theta, OPerandType b)</span></span>;<span class="hljs-function">OPerandType <span class="hljs-title">EvaluateExpression</span><span class="hljs-params">()</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Num</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *b, <span class="hljs-keyword">int</span> i)</span></span>;<span class="hljs-comment">//数值转换</span><span class="hljs-comment">//具体代码实现</span><span class="hljs-function">Status <span class="hljs-title">In</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span>  <span class="hljs-comment">//判断是否是数字</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">switch</span> (c)&#123;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#&#x27;</span>:<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">default</span>:<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">Precede</span><span class="hljs-params">(SElemType e, <span class="hljs-keyword">char</span> c)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">char</span> xita[] = &#123; <span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-string">&#x27;#&#x27;</span> &#125;;<span class="hljs-keyword">char</span> sita[<span class="hljs-number">7</span>][<span class="hljs-number">7</span>] =&#123;&#123; <span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span> &#125;,&#123; <span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span> &#125;,&#123; <span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span> &#125;,&#123; <span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span> &#125;,&#123; <span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span> &#125;,&#123; <span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span> &#125;,&#123; <span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;=&#x27;</span> &#125;&#125;;<span class="hljs-keyword">int</span> i, j;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p=<span class="hljs-number">0</span>;p&lt;<span class="hljs-number">7</span>;p++)<span class="hljs-keyword">if</span> (xita[p] == e.data)&#123;i = p;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>; p &lt; <span class="hljs-number">7</span>; p++)<span class="hljs-keyword">if</span> (xita[p] == c)&#123;j = p;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">return</span> sita[i][j];&#125;<span class="hljs-function">OPerandType <span class="hljs-title">Operate</span><span class="hljs-params">(OPerandType a, <span class="hljs-keyword">char</span> theta, OPerandType b)</span></span><span class="hljs-function"></span>&#123;OPerandType sum = <span class="hljs-number">0</span>;<span class="hljs-keyword">switch</span> (theta)&#123;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:sum = a + b; <span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:sum = a - b; <span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:sum = a * b; <span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:sum = a / b; <span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">return</span> sum;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Num</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *b, <span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">//数值转换</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> s = <span class="hljs-number">1</span>;<span class="hljs-keyword">for</span> (p = <span class="hljs-number">1</span>; p &lt; i; p++)s = s * <span class="hljs-number">10</span>;<span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; i; p++)&#123;sum = (b[p] - <span class="hljs-string">&#x27;0&#x27;</span>) * s + sum;s = s / <span class="hljs-number">10</span>;&#125;<span class="hljs-keyword">return</span> sum;&#125;<span class="hljs-function">OPerandType <span class="hljs-title">EvaluateExpression</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">char</span> charNum[<span class="hljs-number">100</span>]; <span class="hljs-keyword">int</span> ic = <span class="hljs-number">0</span>;SqStack OPTR; InitStack(OPTR);SElemType e, d, x, e1, theta;<span class="hljs-keyword">int</span> a, b;e.data = <span class="hljs-string">&#x27;#&#x27;</span>;Push(OPTR, e);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&quot;</span>);<span class="hljs-keyword">char</span> c = getchar();GetTop(OPTR, e1);<span class="hljs-keyword">while</span> (c != <span class="hljs-string">&#x27;#&#x27;</span> ||  e1.data!= <span class="hljs-string">&#x27;#&#x27;</span>)&#123;<span class="hljs-keyword">if</span> (!In(c))&#123;charNum[ic] = c;++ic;c = getchar();&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span> (ic != <span class="hljs-number">0</span>)&#123;OPND[iod] = Num(charNum, ic);++iod;ic = <span class="hljs-number">0</span>;&#125;GetTop(OPTR, e1);<span class="hljs-keyword">switch</span> (Precede(e1, c))&#123;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&lt;&#x27;</span>:e.data = c;Push(OPTR, e);c = getchar();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;=&#x27;</span>:Pop(OPTR, x);c = getchar(); <span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&gt;&#x27;</span>:Pop(OPTR, theta);b = OPND[--iod];a = OPND[--iod];OPND[iod] = Operate(a, theta.data, b);++iod;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">//switch</span>GetTop(OPTR, e1);&#125;<span class="hljs-comment">//while</span>&#125;<span class="hljs-keyword">return</span> OPND[--iod];&#125;</code></pre><p><strong>总结：</strong>严奶奶的书中的代码除看不理解，再看就闷逼、反复思考把里面的具体操作弄懂之后。在看书中的伪代码，才发现，代码虽然在机器上具体实现了，但是具体功能的核心代码却不是自己想出来的，初实现的时候还很开心，开心过后就会发现有些失落，感觉自己写出了很多的没用的代码，书中的代码就很简洁、直观，足以。</p><p>写出来也只是给自己的一份锻炼吧。</p><h3 id="二、队的实现与基本操作"><a href="#二、队的实现与基本操作" class="headerlink" title="二、队的实现与基本操作"></a>二、队的实现与基本操作</h3><h4 id="1、队的链式存储结构"><a href="#1、队的链式存储结构" class="headerlink" title="1、队的链式存储结构"></a>1、队的链式存储结构</h4><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ok 1;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR 0;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> true 1;</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> false 0;</span><span class="hljs-comment">//#define MAXSIZE 100;</span><span class="hljs-keyword">int</span> MAXSIZE = <span class="hljs-number">10</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> OVERFLOW 0</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-keyword">int</span> e;&#125;QueueElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>QueueElemType *base;<span class="hljs-keyword">int</span> front;<span class="hljs-keyword">int</span> rear;&#125;SqQueue;<span class="hljs-comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="hljs-function">Status <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>;<span class="hljs-function">Status <span class="hljs-title">DestroyQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>;<span class="hljs-function">Status <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">QueueLenth</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>;<span class="hljs-function">Status <span class="hljs-title">GEtaHead</span><span class="hljs-params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span>;<span class="hljs-function">Status <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q, QueueElemType e)</span></span>;<span class="hljs-comment">//插入元素-&gt;进队</span><span class="hljs-function">Status <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span>;<span class="hljs-comment">//删除元素-&gt;出队</span><span class="hljs-function">Status <span class="hljs-title">QueueTraverse</span><span class="hljs-params">(SqQueue Q)</span></span>;<span class="hljs-function">Status <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>;<span class="hljs-comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="hljs-function">Status <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span></span><span class="hljs-function"></span>&#123;Q.base = (QueueElemType  *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QueueElemType)*MAXSIZE);<span class="hljs-keyword">if</span> (!Q.base) <span class="hljs-built_in">exit</span>(OVERFLOW);Q.front = <span class="hljs-number">0</span>;Q.rear = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">QueueLenth</span><span class="hljs-params">(SqQueue &amp;Q)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> (Q.rear - Q.front + MAXSIZE) % MAXSIZE;&#125;<span class="hljs-function">Status <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q, QueueElemType e)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> ((Q.rear + <span class="hljs-number">1</span>) % MAXSIZE == Q.front) <span class="hljs-keyword">return</span> ERROR;Q.base[Q.rear] = e;Q.rear = (Q.rear + <span class="hljs-number">1</span>) % MAXSIZE;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (Q.front == Q.rear) <span class="hljs-keyword">return</span> ERROR;e = Q.base[Q.front];Q.front = (Q.front + <span class="hljs-number">1</span>) % MAXSIZE;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">DestroyQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (!Q.base)<span class="hljs-keyword">return</span> ok;<span class="hljs-built_in">free</span>(Q.base);Q.base = <span class="hljs-literal">NULL</span>;Q.front = <span class="hljs-number">0</span>;Q.rear = <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue &amp;Q)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (Q.front == Q.rear) <span class="hljs-keyword">return</span> ok;<span class="hljs-keyword">return</span> ERROR;&#125;<span class="hljs-function">Status <span class="hljs-title">GEtaHead</span><span class="hljs-params">(SqQueue &amp;Q, QueueElemType &amp;e)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (QueueEmpty(Q)) <span class="hljs-keyword">return</span> ERROR;e = Q.base[Q.front];<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">QueueTraverse</span><span class="hljs-params">(SqQueue Q)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i = Q.front;<span class="hljs-keyword">while</span> (i != Q.rear)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, Q.base[i]);i = (i + <span class="hljs-number">1</span>) % MAXSIZE;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="2、队的顺序存储——循环队列"><a href="#2、队的顺序存储——循环队列" class="headerlink" title="2、队的顺序存储——循环队列"></a>2、队的顺序存储——循环队列</h4><ul><li><p>求队长的公式：(Q.rear-Q.front+MAXSIZE)%MAXSIZE</p></li><li><p>队尾插入数据队满条件：(Q.rear+1)%MAXSIZE==Q.front</p></li><li><p>对头对尾下标加一：Q.front=(Q.front+1)%MAXSIZE</p></li></ul><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Stack.h&quot;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> OVERFLOW 0</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><span class="hljs-keyword">int</span> e;&#125;QElemType;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> &#123;</span>QElemType data;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span> *<span class="hljs-title">next</span>;</span>&#125;QNode,*pQueuePtr;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>pQueuePtr front;<span class="hljs-comment">//队头指针</span>pQueuePtr rear;<span class="hljs-comment">//队尾指针</span>&#125;LinkQueue;<span class="hljs-comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="hljs-function">Status <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span>; <span class="hljs-function">Status <span class="hljs-title">DestroyQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span>;<span class="hljs-function">Status <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">QueueLenth</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span>;<span class="hljs-function">Status <span class="hljs-title">GEtaHead</span><span class="hljs-params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span>;<span class="hljs-function">Status <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q, QElemType e)</span></span>;<span class="hljs-function">Status <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span>;<span class="hljs-function">Status <span class="hljs-title">QueueTraverse</span><span class="hljs-params">(LinkQueue Q)</span></span>;<span class="hljs-comment">//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><span class="hljs-function">Status <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span><span class="hljs-function"></span>&#123;Q.front = Q.rear = (pQueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<span class="hljs-keyword">if</span> (!Q.front) <span class="hljs-built_in">exit</span>(OVERFLOW);Q.front-&gt;next = <span class="hljs-literal">NULL</span>;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">DestroyQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">while</span> (Q.front)&#123;Q.rear = Q.front-&gt;next;<span class="hljs-built_in">free</span>(Q.front);Q.front = Q.rear;&#125;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q, QElemType e)</span></span><span class="hljs-function"></span>&#123;pQueuePtr p;p = (pQueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<span class="hljs-keyword">if</span> (!p) <span class="hljs-built_in">exit</span>(OVERFLOW);p-&gt;data = e;p-&gt;next = <span class="hljs-literal">NULL</span>;Q.rear-&gt;next = p;Q.rear = p;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (Q.front == Q.rear) <span class="hljs-keyword">return</span> ERROR;pQueuePtr p;p = Q.front-&gt;next;e = p-&gt;data;Q.front-&gt;next = p-&gt;next;<span class="hljs-built_in">free</span>(p);<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function">Status <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (Q.front == Q.rear) <span class="hljs-keyword">return</span> ok;<span class="hljs-keyword">return</span> ERROR;&#125;<span class="hljs-function">Status <span class="hljs-title">GEtaHead</span><span class="hljs-params">(LinkQueue &amp;Q, QElemType &amp;e)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">if</span> (QueueEmpty(Q)) <span class="hljs-keyword">return</span> ERROR;e = Q.front-&gt;next-&gt;data;<span class="hljs-keyword">return</span> ok;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">QueueLenth</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;pQueuePtr p;p = Q.front;<span class="hljs-keyword">if</span> (p-&gt;next)&#123;++i;p = p-&gt;next;&#125;<span class="hljs-keyword">return</span> i;&#125;<span class="hljs-function">Status <span class="hljs-title">QueueTraverse</span><span class="hljs-params">(LinkQueue Q)</span></span><span class="hljs-function"></span>&#123;pQueuePtr p;p = Q.front-&gt;next;<span class="hljs-keyword">while</span> (p)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);p = p-&gt;next;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-keyword">return</span> ok;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/17/hello-world/"/>
    <url>/2020/09/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
